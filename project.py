# -*- coding: utf-8 -*-
"""project.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ELcrx5N7m1YwZQUHH28W_AtMWyikxRBI
"""

!pip install transformers

from transformers import pipeline

classifier = pipeline("text-classification",model="ibm-granite/granite-3.3-2b-instruct")

classifier("This movie is amazing.")

!pip install gradio

# Step 1: Install Dependencies
!pip install -q transformers gradio pinecone-client google-auth google-api-python-client

# Step 2: Import Libraries
from transformers import AutoTokenizer, AutoModelForCausalLM
import gradio as gr
import torch
import random

# Step 3: Load Granite Model
model_id = "ibm-granite/granite-3.3-2b-instruct"

tokenizer = AutoTokenizer.from_pretrained(model_id)
model = AutoModelForCausalLM.from_pretrained(model_id, torch_dtype=torch.float16, device_map="auto")

# Step 4: Simulate Google Classroom Sync (Mock)
def sync_google_classroom(user_email):
    # In real use: authenticate and use Google Classroom API
    return {
        "email": user_email,
        "courses": ["Physics - 10th", "Chemistry - 10th", "History - 10th"]
    }

# Step 5: Generate Quiz from Course
def generate_quiz_from_course(course_name):
    prompt = f"Generate a 5-question multiple-choice quiz on the topic: {course_name}"
    inputs = tokenizer(prompt, return_tensors="pt").input_ids.to(model.device)
    outputs = model.generate(inputs, max_new_tokens=300, do_sample=True, temperature=0.7)
    return tokenizer.decode(outputs[0], skip_special_tokens=True)

# Step 6: Simulate Performance Dashboard (Mock)
def educator_dashboard():
    return {
        "class": "10th Grade",
        "students": [
            {"name": "Alice", "last_topic": "Photosynthesis", "score": 85},
            {"name": "Bob", "last_topic": "World War II", "score": 78},
            {"name": "Charlie", "last_topic": "Electricity", "score": 92}
        ]
    }

# Step 7: Diagnostic Test (Simulated)
def run_diagnostic_test(name):
    prompt = f"Create a 3-question diagnostic test to assess {name}'s understanding in 10th grade math and science."
    inputs = tokenizer(prompt, return_tensors="pt").input_ids.to(model.device)
    outputs = model.generate(inputs, max_new_tokens=200, temperature=0.6)
    return tokenizer.decode(outputs[0], skip_special_tokens=True)

# Step 8: Gradio Interface with Scenarios
def student_interface(email):
    synced = sync_google_classroom(email)
    course_quizzes = [generate_quiz_from_course(course) for course in synced['courses']]
    return "\n\n".join(course_quizzes)

def teacher_interface():
    data = educator_dashboard()
    report = "Class Performance Report:\n"
    for student in data["students"]:
        report += f"{student['name']}: {student['last_topic']} - Score: {student['score']}\n"
    return report

def diagnostic_interface(name):
    return run_diagnostic_test(name)

with gr.Blocks(title="EduTutorAI") as demo:
    gr.Markdown("# ðŸŽ“ EduTutorAI - Generative AI for Personalized Learning")

    with gr.Tab("Scenario 1: Student - Personalized Learning"):
        student_email = gr.Textbox(label="Enter Student Email")
        quiz_btn = gr.Button("Sync Classroom & Generate Quizzes")
        quiz_output = gr.Textbox(label="Generated Quizzes", lines=10)
        quiz_btn.click(student_interface, inputs=student_email, outputs=quiz_output)

    with gr.Tab("Scenario 2: Educator Dashboard"):
        teacher_btn = gr.Button("View Performance Dashboard")
        teacher_output = gr.Textbox(label="Student Performance")
        teacher_btn.click(teacher_interface, outputs=teacher_output)

    with gr.Tab("Scenario 3: Diagnostic Test"):
        student_name = gr.Textbox(label="Enter Student Name")
        diag_btn = gr.Button("Run Diagnostic Test")
        diag_output = gr.Textbox(label="Diagnostic Quiz")
        diag_btn.click(diagnostic_interface, inputs=student_name, outputs=diag_output)

    with gr.Tab("Scenario 4: Google Classroom Integration"):
        gr.Markdown("âœ… This is a simulated integration. In a real setup, Google OAuth and API will be used to sync classroom data and auto-generate quiz topics.")

demo.launch(share=True)